/*
  ================================================================================
  GARANTIZAR ACCESO ADMINISTRADOR - system@constructia.com
  ================================================================================

  Este script SQL garantiza el acceso completo de administrador para:

  üìß Email: system@constructia.com
  üîë Contrase√±a: Superadmin123
  üë§ Rol: SuperAdmin
  üè¢ Tenant: Development Tenant (DEV_TENANT_ID)

  ================================================================================
  ESTADO ACTUAL (VERIFICADO Y CORREGIDO) ‚úÖ
  ================================================================================

  ‚úÖ Usuario creado en auth.users (Supabase Authentication)
  ‚úÖ Usuario creado en public.users con rol SuperAdmin
  ‚úÖ Contrase√±a actualizada a: Superadmin123
  ‚úÖ Email confirmado
  ‚úÖ Usuario activo
  ‚úÖ Tenant asociado correctamente
  ‚úÖ Pol√≠ticas RLS configuradas para acceso SuperAdmin
  ‚úÖ Trigger handle_new_user actualizado para NO interferir con SuperAdmin
  ‚úÖ Metadata de autenticaci√≥n configurada correctamente
  ‚úÖ Sesiones anteriores limpiadas

  IMPORTANTE: Se aplicaron las siguientes correcciones:
  1. fix_role_escalation_trigger_auditoria_columns - Correcci√≥n de columnas de auditor√≠a
  2. ensure_system_admin_access - Garantizar acceso SuperAdmin inicial
  3. fix_system_admin_auth_issue - Correcci√≥n del problema "Database error querying schema"
  4. fix_handle_new_user_trigger_for_superadmin - Actualizaci√≥n del trigger para evitar conflictos

  ================================================================================
  DERECHOS DE ACCESO
  ================================================================================

  El usuario system@constructia.com tiene acceso completo a:

  ‚úì Dashboard de administraci√≥n completo
  ‚úì Gesti√≥n de todos los tenants (clientes)
  ‚úì Gesti√≥n de todos los usuarios
  ‚úì Acceso a todos los recursos del sistema
  ‚úì Bypass de aislamiento de tenants
  ‚úì Gesti√≥n de empresas, obras, documentos de todos los clientes
  ‚úì Configuraci√≥n del sistema
  ‚úì Logs de auditor√≠a completos

  ================================================================================
  C√ìMO INICIAR SESI√ìN
  ================================================================================

  1. Navega a: /admin/login
  2. Ingresa el email: system@constructia.com
  3. Ingresa la contrase√±a: Superadmin123 (con S may√∫scula)
  4. Haz clic en "Acceder como Administrador"

  IMPORTANTE: La contrase√±a es case-sensitive. Debe ser exactamente: Superadmin123

  ================================================================================
  VERIFICACI√ìN DEL ESTADO
  ================================================================================

  Para verificar que el usuario est√° correctamente configurado, ejecuta:
*/

-- Verificar usuario en auth.users
SELECT
  id,
  email,
  email_confirmed_at IS NOT NULL as email_confirmado,
  encrypted_password IS NOT NULL as tiene_password,
  created_at as fecha_creacion
FROM auth.users
WHERE email = 'system@constructia.com';

-- Verificar usuario en public.users
SELECT
  u.id,
  u.email,
  u.name as nombre,
  u.role as rol,
  u.active as activo,
  u.tenant_id,
  t.name as nombre_tenant,
  t.status as estado_tenant
FROM users u
LEFT JOIN tenants t ON u.tenant_id = t.id
WHERE u.email = 'system@constructia.com';

-- Verificar pol√≠ticas RLS para SuperAdmin
SELECT
  tablename as tabla,
  policyname as politica,
  cmd as comando
FROM pg_policies
WHERE tablename = 'users'
AND policyname ILIKE '%superadmin%'
ORDER BY policyname;

-- Verificaci√≥n completa de todos los checks
WITH auth_check AS (
  SELECT
    'Auth User' as check_name,
    'Email Confirmed' as status_name,
    email_confirmed_at IS NOT NULL as status
  FROM auth.users
  WHERE email = 'system@constructia.com'

  UNION ALL

  SELECT
    'Auth User' as check_name,
    'Has Password' as status_name,
    encrypted_password IS NOT NULL as status
  FROM auth.users
  WHERE email = 'system@constructia.com'

  UNION ALL

  SELECT
    'Public User' as check_name,
    'Is SuperAdmin' as status_name,
    (role = 'SuperAdmin') as status
  FROM users
  WHERE email = 'system@constructia.com'

  UNION ALL

  SELECT
    'Public User' as check_name,
    'Is Active' as status_name,
    active as status
  FROM users
  WHERE email = 'system@constructia.com'
)
SELECT
  check_name,
  status_name,
  CASE WHEN status THEN '‚úÖ YES' ELSE '‚ùå NO' END as result
FROM auth_check
ORDER BY check_name, status_name;

/*
  ================================================================================
  RESULTADO ESPERADO
  ================================================================================

  Primera consulta (auth.users):
  --------------------------------
  id: 20000000-0000-0000-0000-000000000001
  email: system@constructia.com
  email_confirmado: true
  tiene_password: true
  fecha_creacion: (fecha actual)

  Segunda consulta (public.users):
  ---------------------------------
  id: 20000000-0000-0000-0000-000000000001
  email: system@constructia.com
  nombre: System Admin
  rol: SuperAdmin
  activo: true
  tenant_id: 00000000-0000-0000-0000-000000000001
  nombre_tenant: Development Tenant
  estado_tenant: active

  Tercera consulta (RLS policies):
  ---------------------------------
  M√∫ltiples pol√≠ticas que permiten al SuperAdmin:
  - Leer todos los usuarios (SELECT)
  - Actualizar todos los usuarios (UPDATE)
  - Gestionar todos los usuarios (ALL)

  Cuarta consulta (verificaci√≥n completa):
  -----------------------------------------
  Auth User | Email Confirmed | ‚úÖ YES
  Auth User | Has Password    | ‚úÖ YES
  Public User | Is Active     | ‚úÖ YES
  Public User | Is SuperAdmin | ‚úÖ YES

  ================================================================================
  MIGRACIONES APLICADAS
  ================================================================================

  Este acceso fue garantizado mediante las siguientes migraciones:

  1. fix_role_escalation_trigger_auditoria_columns
     - Corrige las columnas de la tabla auditoria en los triggers
     - Previene errores en el registro de auditor√≠a
     - Actualiza prevent_superadmin_role_escalation() y create_authorized_superadmin()

  2. ensure_system_admin_access
     - Crea/actualiza el usuario en auth.users con la contrase√±a correcta
     - Crea/actualiza el usuario en public.users con rol SuperAdmin
     - Verifica y crea pol√≠ticas RLS necesarias
     - Registra la operaci√≥n en la tabla de auditor√≠a
     - Usa set_config para autorizar la creaci√≥n de SuperAdmin

  3. fix_system_admin_auth_issue
     - Actualiza metadata de autenticaci√≥n (raw_app_meta_data y raw_user_meta_data)
     - Regenera el hash de la contrase√±a con bcrypt
     - Confirma el email address
     - Limpia sesiones anteriores que puedan causar conflictos
     - Establece el usuario como completamente autenticado

  4. fix_handle_new_user_trigger_for_superadmin
     - Corrige el trigger handle_new_user para verificar usuarios existentes
     - Previene el error "Database error querying schema" durante login
     - Preserva roles SuperAdmin existentes sin sobrescribirlos
     - Maneja errores gracefully sin bloquear la autenticaci√≥n
     - Cambia el trigger de BEFORE a AFTER para mejor compatibilidad

  ================================================================================
  SEGURIDAD
  ================================================================================

  üîí El sistema tiene m√∫ltiples capas de seguridad:

  1. Triggers que previenen escalada de privilegios no autorizada
  2. Pol√≠ticas RLS que controlan el acceso a nivel de fila
  3. Registro de auditor√≠a de todas las acciones administrativas
  4. Contrase√±a encriptada con bcrypt (nunca se almacena en texto plano)
  5. El rol SuperAdmin solo puede ser asignado mediante scripts SQL autorizados
  6. Whitelist de emails autorizados en src/config/security-config.ts
  7. Verificaci√≥n de autorizaci√≥n antes de permitir login de admin

  ================================================================================
  NOTAS IMPORTANTES
  ================================================================================

  ‚ö†Ô∏è Este usuario es para administraci√≥n del sistema
  ‚ö†Ô∏è No usar este usuario para operaciones de cliente
  ‚ö†Ô∏è La contrase√±a debe cambiarse en producci√≥n
  ‚ö†Ô∏è Todas las acciones como SuperAdmin son registradas en auditor√≠a
  ‚ö†Ô∏è El email system@constructia.com est√° en la whitelist de seguridad

  ================================================================================
  SOPORTE Y SOLUCI√ìN DE PROBLEMAS
  ================================================================================

  Si tienes problemas para iniciar sesi√≥n:

  1. Verifica que est√°s en la URL correcta: /admin/login
  2. Verifica que las variables de entorno de Supabase est√°n configuradas en .env:
     - VITE_SUPABASE_URL
     - VITE_SUPABASE_ANON_KEY
     - VITE_SUPABASE_SERVICE_ROLE_KEY
  3. Ejecuta las consultas de verificaci√≥n arriba
  4. Revisa los logs de la aplicaci√≥n para errores de autenticaci√≥n
  5. Recarga la p√°gina del navegador (Ctrl+Shift+R) para limpiar la cach√©
  6. Si el problema persiste, vuelve a ejecutar: fix_system_admin_auth_issue
  7. Verifica que no hay errores en la consola del navegador (F12)

  PROBLEMAS COMUNES RESUELTOS:

  ‚ùå Error: "Database error querying schema"
  ‚úÖ Soluci√≥n: Migraci√≥n fix_handle_new_user_trigger_for_superadmin aplicada
     El trigger ahora verifica usuarios existentes antes de crear perfiles
     Ya NO deber√≠a aparecer este error

  ‚ùå Error: "Invalid login credentials"
  ‚úÖ Soluci√≥n: La contrase√±a se regener√≥ correctamente como Superadmin123
     Usa exactamente esta contrase√±a con la S may√∫scula
     Case-sensitive: Superadmin123 (NO superadmin123)

  ‚ùå Error: Usuario no puede acceder al admin
  ‚úÖ Soluci√≥n: El email system@constructia.com est√° en la whitelist de seguridad
     Ver src/config/security-config.ts - l√≠neas 22-25
     AUTHORIZED_SUPERADMIN_EMAILS incluye este email

  ‚ùå Error: "Access denied: User does not have SuperAdmin role"
  ‚úÖ Soluci√≥n: El rol est√° correctamente asignado en public.users
     Verificado con las queries de arriba
     Ejecuta la cuarta query para confirmar

  ‚ùå Error: P√°gina en blanco despu√©s de login
  ‚úÖ Soluci√≥n: Limpia la cach√© del navegador y recarga
     O abre en modo inc√≥gnito para probar

  ================================================================================
  NOTAS T√âCNICAS
  ================================================================================

  IDs importantes:
  - User ID: 20000000-0000-0000-0000-000000000001
  - Tenant ID: 00000000-0000-0000-0000-000000000001 (DEV_TENANT_ID)
  - Instance ID: 00000000-0000-0000-0000-000000000000

  Password hashing:
  - Algoritmo: bcrypt
  - Salt rounds: 10 (default de gen_salt('bf'))
  - Funci√≥n: crypt('Superadmin123', gen_salt('bf'))

  Authentication flow:
  1. Usuario ingresa credenciales en /admin/login
  2. AdminLogin.tsx verifica email en whitelist (security-config.ts)
  3. Supabase Auth verifica credenciales (auth.users)
  4. AdminLogin.tsx verifica rol SuperAdmin (public.users)
  5. Si todo OK, redirige a /admin
  6. ProtectedRoute verifica sesi√≥n continuamente

  ================================================================================
*/

-- Script de re-aplicaci√≥n (si necesitas restablecer el acceso)
/*
  Si por alguna raz√≥n necesitas restablecer el acceso, ejecuta:

  1. Conecta a tu base de datos Supabase
  2. Ejecuta la migraci√≥n: fix_system_admin_auth_issue
  3. El script es idempotente (seguro ejecutar m√∫ltiples veces)
  4. Verifica con las consultas de verificaci√≥n arriba
  5. Recarga la p√°gina de login en el navegador
*/

-- FIN DEL DOCUMENTO
