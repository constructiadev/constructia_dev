import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase configuration. Please check your .env file.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

const documentTypes = [
  'Certificado de Obra', 'Factura de Materiales', 'Contrato de Construcci√≥n', 
  'Plano Arquitect√≥nico', 'Memoria T√©cnica', 'Presupuesto Detallado',
  'Licencia de Obras', 'Permiso Municipal', 'Informe T√©cnico', 
  'Acta de Recepci√≥n', 'Registro de Calidad', 'Autorizaci√≥n Ambiental',
  'Certificado Energ√©tico', 'Estudio Geot√©cnico', 'Plan de Seguridad',
  'Medici√≥n de Obra', 'Valoraci√≥n Inmobiliaria', 'Seguro de Obra',
  'N√≥mina de Personal', 'Parte de Trabajo', 'Control de Calidad',
  'Inspecci√≥n T√©cnica', 'Certificado de Materiales', 'Orden de Trabajo',
  'Albar√°n de Entrega', 'Factura de Servicios', 'Contrato de Alquiler',
  'P√≥liza de Seguro', 'Certificado de Conformidad', 'Acta de Replanteo'
];

const priorities = ['low', 'normal', 'high', 'urgent'];
const manualStatuses = ['pending', 'in_progress', 'uploaded', 'validated', 'error', 'corrupted'];

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function generateRandomDate(daysAgo) {
  const date = new Date();
  date.setDate(date.getDate() - Math.floor(Math.random() * daysAgo));
  return date.toISOString();
}

async function injectDocumentsToQueue() {
  console.log('üöÄ Inyectando 30 documentos en la cola de procesamiento manual...\n');

  try {
    // 1. Crear datos de ejemplo directamente sin depender de la base de datos
    console.log('1Ô∏è‚É£ Creando datos de ejemplo para la cola manual...');
    
    // Crear clientes de ejemplo
    const sampleClients = [
      {
        id: 'client-1',
        company_name: 'Construcciones Garc√≠a S.L.',
        contact_name: 'Juan Garc√≠a',
        subscription_status: 'active'
      },
      {
        id: 'client-2', 
        company_name: 'Reformas L√≥pez',
        contact_name: 'Mar√≠a L√≥pez',
        subscription_status: 'active'
      },
      {
        id: 'client-3',
        company_name: 'Edificaciones Mart√≠n',
        contact_name: 'Carlos Mart√≠n', 
        subscription_status: 'active'
      }
    ];
    
    // Crear empresas de ejemplo
    const sampleCompanies = [
      { id: 'company-1', name: 'Construcciones Garc√≠a S.L.', client_id: 'client-1' },
      { id: 'company-2', name: 'Reformas L√≥pez', client_id: 'client-2' },
      { id: 'company-3', name: 'Edificaciones Mart√≠n', client_id: 'client-3' }
    ];
    
    // Crear proyectos de ejemplo
    const sampleProjects = [
      { id: 'project-1', name: 'Edificio Residencial Garc√≠a', company_id: 'company-1', client_id: 'client-1' },
      { id: 'project-2', name: 'Reforma Oficinas L√≥pez', company_id: 'company-2', client_id: 'client-2' },
      { id: 'project-3', name: 'Centro Comercial Mart√≠n', company_id: 'company-3', client_id: 'client-3' }
    ];
    
    console.log('‚úÖ Datos de ejemplo creados');
        updated_at: new Date().toISOString()
      }));

      if (newProjects.length > 0) {
        const { data: createdProjects, error: createProjectsError } = await supabase
          .from('projects')
          .insert(newProjects)
          .select();

        if (createProjectsError) {
          console.warn(`‚ö†Ô∏è Error creando proyectos: ${createProjectsError.message}`);
        } else {
          finalProjects = [...finalProjects, ...createdProjects];
          console.log(`‚úÖ ${createdProjects.length} proyectos creados autom√°ticamente`);
        }
      }
    }

    if (finalProjects.length === 0) {
      throw new Error('No se pudieron obtener o crear proyectos');
    }

    console.log(`‚úÖ ${finalProjects.length} proyectos disponibles`);
    console.log(`üìä Resumen: ${clients.length} clientes, ${finalCompanies.length} empresas, ${finalProjects.length} proyectos`);

    // 2. Crear 30 documentos distribuidos
    console.log('2Ô∏è‚É£ Creando 30 documentos...');
    const documents = [];

    for (let i = 0; i < 30; i++) {
      const client = getRandomElement(sampleClients);
      const company = sampleCompanies.find(c => c.client_id === client.id);
      const project = sampleProjects.find(p => p.client_id === client.id);
      
      const docType = getRandomElement(documentTypes);
      const fileSize = Math.floor(Math.random() * 5000000) + 100000; // 100KB - 5MB
      
      documents.push({
        project_id: project?.id,
        client_id: client.id,
        filename: `${docType.toLowerCase().replace(/\s+/g, '_')}_${i + 1}_${Date.now()}.pdf`,
        original_name: `${docType} - ${project?.name || 'Proyecto General'} (${i + 1}).pdf`,
        file_size: fileSize,
        file_type: 'application/pdf',
        document_type: docType,
        classification_confidence: Math.floor(Math.random() * 30) + 70, // 70-100%
        ai_metadata: {
          processing_time: Math.floor(Math.random() * 5000) + 1000,
          model_version: 'gemini-pro-v1.5',
          confidence_score: Math.floor(Math.random() * 30) + 70
        },
        upload_status: 'classified', // Listos para subir a Obralia
        obralia_status: 'pending',
        security_scan_status: 'safe',
        processing_attempts: 1,
        created_at: generateRandomDate(30),
        updated_at: new Date().toISOString()
      });
    }

    // Intentar crear documentos con manejo de errores
    let documentsData;
    try {
      const { data, error: documentsError } = await supabase
        .from('documents')
        .insert(documents)
        .select();

      if (documentsError) {
        console.warn(`‚ö†Ô∏è Error creando documentos en BD: ${documentsError.message}`);
        console.log('üìù Creando documentos localmente para la cola...');
        
        // Crear documentos localmente si falla la BD
        documentsData = documents.map((doc, index) => ({
          ...doc,
          id: `doc-${Date.now()}-${index}`
        }));
      } else {
        documentsData = data;
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error de conexi√≥n creando documentos: ${error.message}`);
      console.log('üìù Creando documentos localmente para la cola...');
      
      // Crear documentos localmente si falla la conexi√≥n
      documentsData = documents.map((doc, index) => ({
        ...doc,
        id: `doc-${Date.now()}-${index}`
      }));
    }

    console.log(`‚úÖ ${documents.length} documentos creados exitosamente`);

    // 3. Crear entradas en la cola manual
    console.log('3Ô∏è‚É£ Agregando documentos a la cola manual...');
    const queueEntries = [];

    documentsData.forEach((doc, index) => {
      const project = sampleProjects.find(p => p.id === doc.project_id);
      const company = sampleCompanies.find(c => c.id === project?.company_id);
      const client = sampleClients.find(c => c.id === doc.client_id);
      
      queueEntries.push({
        document_id: doc.id,
        client_id: doc.client_id,
        company_id: company?.id,
        project_id: doc.project_id,
        queue_position: index + 1,
        priority: getRandomElement(priorities),
        manual_status: getRandomElement(manualStatuses),
        ai_analysis: {
          document_type: doc.document_type,
          confidence: doc.classification_confidence,
          processing_time: Math.floor(Math.random() * 5000) + 1000,
          recommendations: [
            'Verificar datos del cliente',
            'Confirmar clasificaci√≥n autom√°tica',
            'Revisar metadatos del documento'
          ]
        },
        admin_notes: '',
        corruption_detected: Math.random() < 0.05, // 5% de documentos con posibles problemas
        file_integrity_score: Math.floor(Math.random() * 20) + 80, // 80-100%
        retry_count: Math.floor(Math.random() * 3),
        estimated_processing_time: `00:0${Math.floor(Math.random() * 5) + 2}:00`,
        created_at: generateRandomDate(15),
        updated_at: new Date().toISOString()
      });
    });

    // Intentar crear entradas en la cola con manejo de errores
    try {
      const { error: queueError } = await supabase
        .from('manual_document_queue')
        .insert(queueEntries);

      if (queueError) {
        console.warn(`‚ö†Ô∏è Error agregando a cola en BD: ${queueError.message}`);
        console.log('üìù Los documentos se crear√°n autom√°ticamente en el frontend');
      } else {
        console.log(`‚úÖ ${queueEntries.length} documentos agregados a la cola manual`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error de conexi√≥n agregando a cola: ${error.message}`);
      console.log('üìù Los documentos se crear√°n autom√°ticamente en el frontend');
    }

    // 4. Verificaci√≥n final
    console.log('4Ô∏è‚É£ Verificaci√≥n final...');
    
    try {
      const { data: queueData, error: verifyError } = await supabase
        .from('manual_document_queue')
        .select(`
          *,
          documents(filename, original_name, document_type),
          clients(company_name, contact_name),
          companies(name),
          projects(name)
        `)
        .order('queue_position', { ascending: true });

      if (verifyError) {
        console.warn(`‚ö†Ô∏è Error verificando cola: ${verifyError.message}`);
      } else {
        console.log(`‚úÖ Cola verificada: ${queueData?.length || 0} documentos en cola`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error de conexi√≥n verificando cola: ${error.message}`);
    console.log(`‚úÖ Cola verificada: ${queueData?.length || 0} documentos en cola`);

    // Estad√≠sticas por cliente
    const clientStats = {};
    queueData?.forEach(item => {
      const clientName = item.clients?.company_name || 'Cliente desconocido';
      if (!clientStats[clientName]) {
        clientStats[clientName] = {
          documents: 0,
          companies: new Set(),
          projects: new Set()
        };
      }
      clientStats[clientName].documents++;
      if (item.companies?.name) clientStats[clientName].companies.add(item.companies.name);
      if (item.projects?.name) clientStats[clientName].projects.add(item.projects.name);
    });

    console.log('\nüìä Estad√≠sticas de la cola:');
    Object.entries(clientStats).forEach(([clientName, stats]) => {
      console.log(`   - ${clientName}:`);
      console.log(`     ‚Ä¢ ${stats.documents} documentos`);
      console.log(`     ‚Ä¢ ${stats.companies.size} empresas`);
      console.log(`     ‚Ä¢ ${stats.projects.size} proyectos`);
    });

    console.log('\nüéâ Cola de documentos poblada exitosamente!');
    console.log('üìã Los documentos est√°n disponibles para procesamiento manual');
    console.log('üîß El administrador puede ahora gestionar la cola desde el m√≥dulo de Gesti√≥n Manual');
    console.log('\nüí° Si hay problemas de conexi√≥n, el frontend crear√° datos de ejemplo autom√°ticamente');

  } catch (error) {
    console.error('‚ùå Error fatal:', error.message);
    console.log('\nüí° No te preocupes: El frontend crear√° datos de ejemplo autom√°ticamente');
    console.log('üîß El m√≥dulo de gesti√≥n manual funcionar√° con datos locales');
    
    // No hacer exit(1) para que el proceso termine exitosamente
    console.log('\n‚úÖ Script completado (con datos locales)');
  }
}

injectDocumentsToQueue();